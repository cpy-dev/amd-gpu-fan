#!/usr/bin/python3

from subprocess import getoutput as terminal
import os
import sys
import json

def checkRoot():
    if terminal('whoami') != 'root':
        print('Error: this function requires root execution', file=sys.stderr)
        sys.exit(1)

hwmonDir = '/sys/class/drm/card0/device/hwmon'
hwmonDir = hwmonDir + '/' + os.listdir(hwmonDir)[0]

jsonTemplate = '''
{
    "temp" : {
        "low" : $lowTemp,
        "mid" : $midTemp,
        "high" : $highTemp
    },
    "speed" : {
        "low" : $lowSpeed,
        "mid" : $midSpeed,
        "high" : $highSpeed
    },
    "performance" : "$performance"
}
'''

if __name__ == '__main__':
    args = sys.argv[1:]

    if not len(args):
        print(f'Active configuration name: {terminal("cat /etc/amd-gpu-fan/conf.txt")}')
        print(f'Configuration details:')
        with open(f'/etc/amd-gpu-fan/conf/{terminal("cat /etc/amd-gpu-fan/conf.txt")}', 'r') as conf:
            config = json.load(conf)
        print(f'Low: {config["temp"]["low"]} C @ {config["speed"]["low"]} rpm')
        print(f'Mid: {config["temp"]["mid"]} C @ {config["speed"]["mid"]} rpm')
        print(f'High: {config["temp"]["high"]} C @ {config["speed"]["high"]} rpm')
        print(f'GPU performance mode: {config["performance"]}')

    elif 'kill' in args:
        checkRoot()
        os.system('systemctl stop amd-gpu-fan.service')

    elif 'off' in args:
        checkRoot()
        os.system('systemctl stop amd-gpu-fan.service')
        os.system('systemctl disable amd-gpu-fan.service')

    elif 'on' in args:
        checkRoot()
        os.system('systemctl enable /etc/amd-gpu-fan/amd-gpu-fan.service')
        os.system('systemctl start amd-gpu-fan.service')

    elif 'start' in args:
        checkRoot()
        os.system('systemctl start amd-gpu-fan.service')

    elif '--help' in args or '-h' in args:
        print('agf-cli: AMD GPU Fan controller CLI')
        print('usage: agf-cli [on | off | kill | start] [-h, --help | -mk, --mkconf | -a, --apply | -ls, --list]')
        print('arguments:')
        print('\ton\tenables the daemon and starts it (root)')
        print('\toff\tstops the daemon and disables it (root)')
        print('\tkill\tstops the daemon (root)')
        print('\tstart\tstarts the daemon (root)')
        print('\t\tif no argument is provided, current configuration is printed')
        print('options:')
        print('\t-h, --help\tshow this message and exit')
        print('\t-mk, --mkconf\tcreate new configuration (root)')
        print('\t-a, --apply\tapply a configuration (root)')
        print('\t-ls, --list\tlist all existing configurations')

    elif '-mk' in args or '--mkconf' in args:
        checkRoot()

        maxRpm = int(terminal(f'cat {hwmonDir}/fan1_max'))
        minRpm = int(terminal(f'cat {hwmonDir}/fan1_min'))

        name = input('New configuration name: ')

        while True:
            lowTemp = input('Enter low temp (0 - 100): ')
            if int(lowTemp) > 0 and int(lowTemp) <= 100:
                break

        while True:
            lowRpm = input(f'Enter low speed ({minRpm} - {maxRpm}): ')
            if int(lowRpm) >= minRpm and int(lowRpm) <= maxRpm:
                break

        while True:
            midTemp = input('Enter mid temp (0 - 100): ')
            if int(midTemp) > 0 and int(midTemp) <= 100:
                break

        while True:
            midRpm = input(f'Enter mid speed ({minRpm} - {maxRpm}): ')
            if int(midRpm) >= minRpm and int(midTemp) <= maxRpm:
                break

        while True:
            highTemp = input('Enter high temp (0 - 100): ')
            if int(highTemp) > 0 and int(highTemp) <= 100:
                break

        while True:
            highRpm = input(f'Enter high speed ({minRpm} - {maxRpm}): ')
            if int(highRpm) >= minRpm and int(highRpm) <= maxRpm:
                break

        while True:
            performanceMode = input('Enter GPU performance mode (low - auto - high): ')
            if performanceMode in ['low', 'auto', 'high']:
                break

        jsonConfig = jsonTemplate.replace('$performance', performanceMode)
        jsonConfig = jsonConfig.replace('$lowTemp', str(int(lowTemp)))
        jsonConfig = jsonConfig.replace('$midTemp', str(int(midTemp)))
        jsonConfig = jsonConfig.replace('$highTemp', str(int(highTemp)))
        jsonConfig = jsonConfig.replace('$lowSpeed', str(int(lowRpm)))
        jsonConfig = jsonConfig.replace('$midSpeed', str(int(midRpm)))
        jsonConfig = jsonConfig.replace('$highSpeed', str(int(highRpm)))

        with open(f'/etc/amd-gpu-fan/conf/{name}', 'w') as config:
            config.write(jsonConfig)

        print(f'New configuration file {name}.json created')

    elif '-a' in args or '--apply' in args:
        checkRoot()
        try:
            index = args.index('-a') + 1
        except:
             index = args.index('--apply') + 1

        try:
            conf = args[index]
        except:
            print('No configuration name provided')
            sys.exit(0)

        if conf not in os.listdir('/etc/amd-gpu-fan/conf/'):
            print(f'Cannot apply "{conf}": no such configuration found')
            sys.exit(0)

        with open('/etc/amd-gpu-fan/conf.txt', 'w') as file:
            file.write(conf)

        os.system('sudo systemctl restart amd-gpu-fan.service')

    elif '-ls' in args or '--list' in args:
        print('\t'.join(os.listdir('/etc/amd-gpu-fan/conf/')))